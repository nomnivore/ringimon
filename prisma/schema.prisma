// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model BaseCreature {
  id      Int    @id @default(autoincrement())
  name    String @unique
  topName String
  midName String
  botName String

  topCreatures     Creature[] @relation("TopCreature")
  midCreatures     Creature[] @relation("MidCreature")
  botCreatures     Creature[] @relation("BotCreature")
  essenceCreatures Creature[] @relation("EssenceCreature")
}

model Emotion {
  id   Int    @id @default(autoincrement())
  name String

  // base-stat modifier values
  hp  Int @default(0)
  spd Int @default(0)
  phy Int @default(0)
  mag Int @default(0)
  ran Int @default(0)

  creatures Creature[]
}

// I'm not sure these should even be database tables
model Type {
  id       Int
  groupId  Int
  name     String     @unique

  creatures Creature[]

  @@id([id, groupId])
}

model Rarity {
  id        Int     @id @default(autoincrement())
  name      String
  threshold Decimal

  creatures Creature[]
}

// =================================================

model Creature {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String

  topId Int
  midId Int
  botId Int

  essenceId   Int
  typeGroupId Int
  typeId      Int
  emotionId   Int
  rarityId    Int

  type Type @relation(fields: [typeGroupId, typeId], references: [id, groupId])
  emotion Emotion @relation(fields: [emotionId], references: [id])
  rarity Rarity @relation(fields: [rarityId], references: [id])

  user    User         @relation(fields: [userId], references: [id])
  top     BaseCreature @relation(name: "TopCreature", fields: [topId], references: [id])
  mid     BaseCreature @relation(name: "MidCreature", fields: [midId], references: [id])
  bot     BaseCreature @relation(name: "BotCreature", fields: [botId], references: [id])
  essence BaseCreature @relation(name: "EssenceCreature", fields: [essenceId], references: [id])
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  creatures     Creature[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
